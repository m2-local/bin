#!/bin/bash
# launch the docker image with volume mapping to the code (yamaha directory)
# and mysql directory.
# TODO We need to map the media directory and other odds and ends
. $(dirname "$0")/load-config

# XXX This is currently unused, it would be needed for the cloud install....
if [ "$docker_sata_vol" == 'pwd' ]; then
    docker_sata_vol="$(pwd)"
else
    docker_sata_vol="$docker_sata_vol"
fi
if [ "$docker_ssd_vol" == 'pwd' ]; then
    docker_ssd_vol="$(pwd)"
else
    docker_ssd_vol="$docker_ssd_vol"
fi

# todo logic for SSL port
# todo logic for mysql port

# container is already created and running, then bail
container_id=$($(dirname "$0")/dkr-id)
if [ $? -eq 0 ]; then
    echo "container is already running, not doing anything"
    exit 1
fi

container_id=$($(dirname "$0")/dkr-id -a)
if [ $? -eq 0 ]; then
    # container is already created, but just stopped, use docker start
    echo "starting existing container"
    docker start "$container_id"
else
    # container does not exist yet, create it using docker run
    echo "creating container"
    docker run -d \
    -e "dkr_image=$docker_image" \
    -e "dkr_version=$docker_version" \
    -e "dkr_sata_mount=$docker_sata_mount" \
    -e "dkr_ssd_mount=$docker_ssd_mount" \
    -e "dkr_sata_vol=$docker_sata_vol" \
    -e "dkr_ssd_vol=$docker_ssd_vol" \
    -e "dkr_mysql_db=$docker_mysql_db" \
    -e "dkr_mysql_pw=$docker_mysql_pw" \
    -e "dkr_mysql_user=$docker_mysql_user" \
    -e "dkr_mysql_host=$docker_mysql_host" \
    -e "docker_image=$docker_image" \
    -e "docker_version=$docker_version" \
    -e "docker_sata_mount=$docker_sata_mount" \
    -e "docker_ssd_mount=$docker_ssd_mount" \
    -e "docker_sata_vol=$docker_sata_vol" \
    -e "docker_ssd_vol=$docker_ssd_vol" \
    -e "docker_mysql_db=$docker_mysql_db" \
    -e "docker_mysql_pw=$docker_mysql_pw" \
    -e "docker_mysql_user=$docker_mysql_user" \
    -e "docker_mysql_host=$docker_mysql_host" \
    -e "project_name=$project_name" \
    -e "project_domain=$domain_name" \
    -e "project_upstream_domain=$project_upstream_domain" \
    -e "project_use_https=$project_use_https" \
    -e "magento_repository=$magento_repository" \
    -e "magento_admin_firstname=$magento_admin_firstname" \
    -e "magento_admin_lastname=$magento_admin_lastname" \
    -e "magento_admin_email=$magento_admin_email" \
    -e "magento_admin_password=$magento_admin_email" \
    -e "magento_language=$magento_language" \
    -e "magento_currency=$magento_currency" \
    -e "magento_timezone=$magento_timezone" \
    -e "magento_use_rewrites=$magento_use_rewrites" \
    -e "magento_backend_frontname=$magento_backend_frontname" \
    -e "magento_session_save=$magento_session_save" \
    -e "network_subnet=$network_subnet" \
    -e "network_gateway=$network_gateway" \
    -e "network_ip=$network_ip" \
    -e "network_name=$network_name" \
    -e "network_driver=$network_driver" \
    -e "network_http_port=$network_http_port" \
    -e "network_https_port=$network_https_port" \
    -e "network_mysql_port=$network_mysql_port" \
    -e "docker_apache_root=$docker_apache_root" \
    -e "magento_repo=$magento_repository" \
    -e "MYSQL_ADMIN_PASS=$docker_mysql_pw" \
    -e "DOMAIN_NAME=$domain_name" \
    -e "UPSTREAM_DOMAIN_NAME=$upstream_domain_name" \
    -p "$network_ip:$network_http_port:$network_http_port" \
    -p "$network_ip:$network_https_port:$network_https_port" \
    -p "$network_ip:$network_mysql_port:$network_mysql_port" \
    -p "$network_ip:9000:9000" \
    -p "$network_ip:35729:35729" \
    --name "$project_fullname" \
    -v "${PWD}":/var/www "${image}:${version}"
fi